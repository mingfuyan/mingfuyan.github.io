<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Solo_Dance的博客</title>
  
  <subtitle>欢迎访问 Solo_Dance的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://solodance.top/"/>
  <updated>2020-04-03T01:09:49.940Z</updated>
  <id>https://solodance.top/</id>
  
  <author>
    <name>Mingfu Yan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计蒜客 - 44529 The League of Sequence Designers(构造)</title>
    <link href="https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044529%20The%20League%20of%20Sequence%20Designers(%E6%9E%84%E9%80%A0)/"/>
    <id>https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044529%20The%20League%20of%20Sequence%20Designers(%E6%9E%84%E9%80%A0)/</id>
    <published>2020-06-26T11:55:40.759Z</published>
    <updated>2020-04-03T01:09:49.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="https://nanti.jisuanke.com/t/44529" target="_blank" rel="noopener">题目链接</a></p><p>给你两个数k，n。n表示构造的序列的最小长度，k表示构造的序列满足下列两种算法得到的答案之差， 构造这个序列，若无，输出-1。</p><a id="more"></a><p>这个序列最多有1999个， 元素的绝对值小于1e6.</p><p><code>sum[i][j] 是指 a[i] 到 a[j]的和</code></p><p>算法1：<br><code>ans = max(ans, (r - l + 1) * sum[l][r])</code></p><p>算法2：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> += a[i]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">sum</span> &lt; <span class="number">0</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="built_in">left</span> = i</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    ans = max(ans, (i - <span class="built_in">left</span>) * <span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先你要明白这两种算法到底有什么不同。</p><p>举个例子  <code>1 -2 2</code>， 这个序列在算法1， 答案是3 (<code>(1 - 2 + 2) * 3</code>) ， 在算法2，答案是2(<code>2 * 1</code>),  这时候我们就可以按照前两项是<code>1 -2</code>， 后面全正来构造了。</p><p>假设前两项是<code>1 -2</code>， 假设后面m个元素的和为sum(后m个元素都是正的)， 那么对于算法1 <code>ans1 = (m + 2) * (sum - 1)</code>，算法2 <code>ans2 = m * sum</code>.</p><p>根据题意 <code>ans1 - ans2 = k</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(m + <span class="number">2</span>) * (sum - <span class="number">1</span>) - m * sum = k</span><br><span class="line">m * sum - m + <span class="number">2</span>sum - <span class="number">2</span> - m * sum = k</span><br><span class="line"><span class="number">2</span>sum - <span class="number">2</span> = m + k</span><br><span class="line">sum = (m + k) / <span class="number">2</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>k是确定的，看m。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前提条件 m + <span class="number">2</span> &lt;= <span class="number">1999</span> -&gt; m &lt; <span class="number">1997</span></span><br><span class="line">m + <span class="number">2</span> &gt;= n</span><br><span class="line">然后 m + k 是偶数</span><br></pre></td></tr></table></figure><p>这时候就呼之欲出了</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">当k为奇数时，m 是奇数 令 m = <span class="number">1997</span></span><br><span class="line">当k为偶数时，m是偶数 令 m = <span class="number">1996</span></span><br><span class="line">但是 k为偶数时，m是偶数时， m + <span class="number">2</span> 是 <span class="number">1998</span>项，然后当n是<span class="number">1999</span>时， 这就少了一项，怎么办？特判，在前面在加一个<span class="number">-1e6</span> 即 <span class="number">-1e6</span> <span class="number">1</span> <span class="number">-2</span></span><br></pre></td></tr></table></figure><p>m给出了， sum(<code>sum = (m + k) / 2 + 1</code>)也就求出来了，然后让后面的项之和为sum就行了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">power by Solo_Dance</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll ll_max = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;<span class="keyword">bool</span> f = <span class="number">0</span>;<span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">1</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt;= <span class="string">'9'</span> &amp;&amp; ch &gt;= <span class="string">'0'</span>) &#123;res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f ? (~res + <span class="number">1</span>) : res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = read();</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> k = read(), len = read();</span><br><span class="line">        <span class="keyword">if</span> (len &gt;= <span class="number">2000</span>)&#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.clear();</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="comment">// 特判</span></span><br><span class="line">        <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; len == <span class="number">1999</span>)&#123;</span><br><span class="line">            m = <span class="number">1996</span>;</span><br><span class="line">            <span class="keyword">int</span> sum = (k + m) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(sum &gt; <span class="number">1000000</span>)&#123;</span><br><span class="line">                ans.push_back(<span class="number">1000000</span>);</span><br><span class="line">                sum -= <span class="number">1000000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.push_back(sum);</span><br><span class="line">            <span class="keyword">while</span>(ans.size() &lt; m) ans.push_back(<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">1999</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1000000 1 -2 "</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> c : ans) <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给m赋值</span></span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) m = <span class="number">1997</span>;</span><br><span class="line">        <span class="keyword">else</span> m = <span class="number">1996</span>;</span><br><span class="line">        <span class="keyword">int</span> sum = (k + m) / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum &gt; <span class="number">1000000</span>)&#123;</span><br><span class="line">            ans.push_back(<span class="number">1000000</span>);</span><br><span class="line">            sum -= <span class="number">1000000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans.push_back(sum);</span><br><span class="line">        <span class="keyword">while</span>(ans.size() &lt; m) ans.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m + <span class="number">2</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"1 -2 "</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> c : ans) <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>恰似你一低头的温柔，较弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  --mingfuyan千万不要图快——如果没有足够的时间用来实践， 那么学得快， 忘得也快。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://nanti.jisuanke.com/t/44529&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你两个数k，n。n表示构造的序列的最小长度，k表示构造的序列满足下列两种算法得到的答案之差， 构造这个序列，若无，输出-1。&lt;/p&gt;
    
    </summary>
    
    
      <category term="构造" scheme="https://solodance.top/categories/%E6%9E%84%E9%80%A0/"/>
    
    
      <category term="Acm" scheme="https://solodance.top/tags/Acm/"/>
    
      <category term="构造" scheme="https://solodance.top/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>计蒜客 - 44345 I - Problem I. Journey(dp).md</title>
    <link href="https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044345%20I%20-%20Problem%20I.%20Journey(dp)/"/>
    <id>https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044345%20I%20-%20Problem%20I.%20Journey(dp)/</id>
    <published>2020-06-26T11:55:40.757Z</published>
    <updated>2020-03-19T14:40:37.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44345" target="_blank" rel="noopener">题目链接</a></p><p>一个无限大的二维图， 从(0, 0)出发，走n步，只能向右和向下走， 不能在同一方向连续走k步，问走n步，不同路径的方案数（对<code>1e9+7</code>取余）。</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>dp[i] 表示第i步向下走的方案数。</p><p>sum = dp[1] + dp[2] + … + dp[n]</p><p>dp[i] 也可以表示第i步向右走的方案数。<br>所以最后答案就是 sum * 2</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">power by Solo_Dance</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll ll_max = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;<span class="keyword">bool</span> f = <span class="number">0</span>;<span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">1</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt;= <span class="string">'9'</span> &amp;&amp; ch &gt;= <span class="string">'0'</span>) &#123;res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f ? (~res + <span class="number">1</span>) : res;</span><br><span class="line">&#125;</span><br><span class="line">ll sum, dp[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = read();</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n = read(), k = read();</span><br><span class="line">        dp[<span class="number">1</span>] = sum = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            dp[i] = sum;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; k)&#123;</span><br><span class="line">                sum += mod - dp[i - k];</span><br><span class="line">                sum %= mod;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += dp[i];</span><br><span class="line">            sum %= mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n) <span class="built_in">cout</span> &lt;&lt; sum * <span class="number">2</span> % mod &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>恰似你一低头的温柔，较弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  --mingfuyan千万不要图快——如果没有足够的时间用来实践， 那么学得快， 忘得也快。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44345&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个无限大的二维图， 从(0, 0)出发，走n步，只能向右和向下走， 不能在同一方向连续走k步，问走n步，不同路径的方案数（对&lt;code&gt;1e9+7&lt;/code&gt;取余）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="dp" scheme="https://solodance.top/categories/dp/"/>
    
    
      <category term="Acm" scheme="https://solodance.top/tags/Acm/"/>
    
      <category term="dp" scheme="https://solodance.top/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>计蒜客 - 44284 Safe Passage(贪心、思维、dp).md</title>
    <link href="https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044284%20Safe%20Passage(%E8%B4%AA%E5%BF%83%E3%80%81%E6%80%9D%E7%BB%B4%E3%80%81dp)/"/>
    <id>https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044284%20Safe%20Passage(%E8%B4%AA%E5%BF%83%E3%80%81%E6%80%9D%E7%BB%B4%E3%80%81dp)/</id>
    <published>2020-06-26T11:55:40.756Z</published>
    <updated>2020-04-20T11:42:19.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44284" target="_blank" rel="noopener">题目链接</a></p><p>很经典的问题。</p><p>n个人要过河， 过河需要保护罩， 一个保护罩最多只能容纳两个人， 每个人过去都有花费的时间， 如果两个人一起过，花费的总时间时间 就是两个人中 花费的时间最大的那个。</p><p>问怎么安排能尽快过河。</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>十分经典的问题， 从小到大排序， 充分利用好a[1], a[2]， 一共有两种情况。</p><p>a[1], a[2] 过去， a[1]回来， a[i] 和 a[i - 1] 过去， a[2] 回来， 总花费是<code>a[2] + a[1] + a[i] + a[2]</code>.</p><p>a[1]，a[i] 过去， a[1]回来， 总花费是<code>a[1] + a[i]</code></p><p>然后用dp！！， dp[i] 表示前i (包括i)全都过河花费的最小时间。</p><p><code>dp[i] = min(dp[i - 2] + a[2] + a[1] + a[i] + a[2] ,dp[i - 1] + a[1] + a[i])</code></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">power by Solo_Dance</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll ll_max = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;<span class="keyword">bool</span> f = <span class="number">0</span>;<span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">1</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt;= <span class="string">'9'</span> &amp;&amp; ch &gt;= <span class="string">'0'</span>) &#123;res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f ? (~res + <span class="number">1</span>) : res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = read();</span><br><span class="line">    sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    f[<span class="number">1</span>] = a[<span class="number">1</span>], f[<span class="number">2</span>] = a[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        f[i] = min(f[i - <span class="number">1</span>] + a[<span class="number">1</span>] + a[i], f[i - <span class="number">2</span>] + a[i] + <span class="number">2</span> * a[<span class="number">2</span>] + a[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f[n] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>恰似你一低头的温柔，较弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  --mingfuyan千万不要图快——如果没有足够的时间用来实践， 那么学得快， 忘得也快。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44284&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;很经典的问题。&lt;/p&gt;
&lt;p&gt;n个人要过河， 过河需要保护罩， 一个保护罩最多只能容纳两个人， 每个人过去都有花费的时间， 如果两个人一起过，花费的总时间时间 就是两个人中 花费的时间最大的那个。&lt;/p&gt;
&lt;p&gt;问怎么安排能尽快过河。&lt;/p&gt;
    
    </summary>
    
    
      <category term="贪心" scheme="https://solodance.top/categories/%E8%B4%AA%E5%BF%83/"/>
    
    
      <category term="思维" scheme="https://solodance.top/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="Acm" scheme="https://solodance.top/tags/Acm/"/>
    
      <category term="贪心" scheme="https://solodance.top/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="dp" scheme="https://solodance.top/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>计蒜客 - 44280 UnDetected(并查集).md</title>
    <link href="https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044280%20UnDetected(%E5%B9%B6%E6%9F%A5%E9%9B%86)/"/>
    <id>https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044280%20UnDetected(%E5%B9%B6%E6%9F%A5%E9%9B%86)/</id>
    <published>2020-06-26T11:55:40.754Z</published>
    <updated>2020-04-20T13:00:47.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44280" target="_blank" rel="noopener">题目链接</a></p><p>给你n个圆，ans 为 最少 前多少个 圆 能把x轴(0, 200) 完全覆盖， 完全覆盖是相交的圆 的最左端 &lt;=0 最右端 &gt;= 200， 输出<code>ans - 1</code></p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>并查集维护边界和输入的圆是否相交。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">power by Solo_Dance</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">202</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll ll_max = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;<span class="keyword">bool</span> f = <span class="number">0</span>;<span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">1</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt;= <span class="string">'9'</span> &amp;&amp; ch &gt;= <span class="string">'0'</span>) &#123;res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f ? (~res + <span class="number">1</span>) : res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y, r;</span><br><span class="line">&#125;a[<span class="number">202</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> DSU&#123;</span><br><span class="line">    <span class="keyword">int</span> f[N], siz[N];</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) f[i] = i, siz[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">tofind</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (f[x] != x) f[x] = tofind(f[x]);</span><br><span class="line">        <span class="keyword">return</span> f[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">tojoin</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        a = tofind(a), b = tofind(b);</span><br><span class="line">        <span class="keyword">if</span> (siz[a] &gt; siz[b]) swap(a, b);</span><br><span class="line">        f[a] = b; siz[b] = max(siz[b], siz[a] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> DSU;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dis = (a[x].x - a[y].x) * (a[x].x - a[y].x) + (a[x].y - a[y].y) * (a[x].y - a[y].y);</span><br><span class="line">    <span class="keyword">return</span> dis &lt; (a[x].r + a[y].r) * (a[x].r + a[y].r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = read();</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        a[i].x = read(), a[i].y = read(), a[i].r = read();</span><br><span class="line">        <span class="keyword">if</span> (a[i].x - a[i].r &lt;= <span class="number">0</span>) tojoin(i, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (a[i].x + a[i].r &gt;= <span class="number">200</span>) tojoin(i, n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; ++j) <span class="keyword">if</span> (is(i, j)) tojoin(i, j);</span><br><span class="line">        <span class="keyword">if</span> (tofind(<span class="number">0</span>) == tofind(n + <span class="number">1</span>))&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i - <span class="number">1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>恰似你一低头的温柔，较弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  --mingfuyan千万不要图快——如果没有足够的时间用来实践， 那么学得快， 忘得也快。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44280&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你n个圆，ans 为 最少 前多少个 圆 能把x轴(0, 200) 完全覆盖， 完全覆盖是相交的圆 的最左端 &amp;lt;=0 最右端 &amp;gt;= 200， 输出&lt;code&gt;ans - 1&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="并查集" scheme="https://solodance.top/categories/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
    
      <category term="Acm" scheme="https://solodance.top/tags/Acm/"/>
    
      <category term="并查集" scheme="https://solodance.top/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>计蒜客 - 44158 World Cup Fever(最短路)</title>
    <link href="https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044158%20World%20Cup%20Fever(%E6%9C%80%E7%9F%AD%E8%B7%AF)/"/>
    <id>https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044158%20World%20Cup%20Fever(%E6%9C%80%E7%9F%AD%E8%B7%AF)/</id>
    <published>2020-06-26T11:55:40.752Z</published>
    <updated>2020-03-26T10:22:55.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44158" target="_blank" rel="noopener">题目链接</a></p><p>两支球队a, b，每支n人， 如果a球队两个队员之间没有其他人， 那么就可以传球， 问a队1号队员最少传多少次能传到a队n号队员， 输出次数， 传不到输出-1.</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>思路很简单， 就是判断a球队的队员能不能直接传球，能的话就加一条边长为1的边， 注意如果两个球员之间有本队的球员也是不能直接传球的！！！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">power by Solo_Dance</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll ll_max = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;<span class="keyword">bool</span> f = <span class="number">0</span>;<span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">1</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt;= <span class="string">'9'</span> &amp;&amp; ch &gt;= <span class="string">'0'</span>) &#123;res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f ? (~res + <span class="number">1</span>) : res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> u, v, w, ne;</span><br><span class="line">&#125; ed[M];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[N], head[N], tim[N], dis[N];</span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    ed[cnt] = &#123;u, v, w, head[u]&#125;;</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    <span class="built_in">memset</span>(tim, <span class="number">0</span>, <span class="keyword">sizeof</span> tim);</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="built_in">memset</span>(dis, INF, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijk</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    priority_queue&lt;P, <span class="built_in">vector</span>&lt;P&gt;, greater&lt;P&gt; &gt; q;</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.emplace(<span class="number">0</span>, s);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top().second; q.pop();</span><br><span class="line">        <span class="keyword">if</span> (vis[u]) <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; ~i; i = ed[i].ne) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = ed[i].v, w = ed[i].w;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class="line">                dis[v] = dis[u] + w, q.emplace(dis[v], v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;a[N], b[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLine</span><span class="params">(point x, point y, point z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (z.x &lt; min(x.x, y.x) || z.x &gt; max(x.x, y.x) || z.y &lt; min(x.y, y.y) || z.y &gt; max(x.y, y.y))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> (x.y - y.y) * (x.x - z.x) == (x.y - z.y) * (x.x - y.x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">if</span> (isLine(a[x], a[y], b[i])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 特别要注意判断如果中间有本队球员也是不能传球的！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == x || y == i) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (isLine(a[x], a[y], a[i])) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n = read();</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) a[i].x = read(), a[i].y = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) b[i].x = read(), b[i].y = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (is(i, j)) add(i, j, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dijk(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (dis[n - <span class="number">1</span>] &gt;= INF) dis[n - <span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dis[n - <span class="number">1</span>] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>恰似你一低头的温柔，较弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  --mingfuyan千万不要图快——如果没有足够的时间用来实践， 那么学得快， 忘得也快。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44158&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;两支球队a, b，每支n人， 如果a球队两个队员之间没有其他人， 那么就可以传球， 问a队1号队员最少传多少次能传到a队n号队员， 输出次数， 传不到输出-1.&lt;/p&gt;
    
    </summary>
    
    
      <category term="最短路" scheme="https://solodance.top/categories/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
    
      <category term="Acm" scheme="https://solodance.top/tags/Acm/"/>
    
      <category term="最短路" scheme="https://solodance.top/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>计蒜客 - 44154 Historical TV Remote Control (思维)</title>
    <link href="https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044154%20Historical%20TV%20Remote%20Control%20(%E6%80%9D%E7%BB%B4)/"/>
    <id>https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044154%20Historical%20TV%20Remote%20Control%20(%E6%80%9D%E7%BB%B4)/</id>
    <published>2020-06-26T11:55:40.750Z</published>
    <updated>2020-03-28T02:55:27.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44154" target="_blank" rel="noopener">题目链接</a></p><p>一个只有12个键的遥控器(0-9 上键， 下键)， 然后最多有9个键坏掉了（上下键不会坏）， 然后给你想要的序号(1-999), 问最少需要按几次上下键。<br>保证只有(0-999), 且0不能到999且999不能到0。</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>暴力， 居然是暴力0~999 。<br>然后别忘了特判0 。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">power by Solo_Dance</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll ll_max = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;<span class="keyword">bool</span> f = <span class="number">0</span>;<span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">1</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt;= <span class="string">'9'</span> &amp;&amp; ch &gt;= <span class="string">'0'</span>) &#123;res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f ? (~res + <span class="number">1</span>) : res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;ma;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; ma[<span class="number">0</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (ma[tmp]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = read();</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = read();</span><br><span class="line">        ma[x] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ta = read();</span><br><span class="line">    <span class="keyword">int</span> ans = INF;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">999</span>; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> d = <span class="built_in">abs</span>(ta - i);</span><br><span class="line">        <span class="keyword">if</span> (d &lt; ans &amp;&amp; is(i)) ans = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>恰似你一低头的温柔，较弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  --mingfuyan千万不要图快——如果没有足够的时间用来实践， 那么学得快， 忘得也快。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44154&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个只有12个键的遥控器(0-9 上键， 下键)， 然后最多有9个键坏掉了（上下键不会坏）， 然后给你想要的序号(1-999), 问最少需要按几次上下键。&lt;br&gt;保证只有(0-999), 且0不能到999且999不能到0。&lt;/p&gt;
    
    </summary>
    
    
      <category term="思维" scheme="https://solodance.top/categories/%E6%80%9D%E7%BB%B4/"/>
    
    
      <category term="思维" scheme="https://solodance.top/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="Acm" scheme="https://solodance.top/tags/Acm/"/>
    
  </entry>
  
  <entry>
    <title>计蒜客 - 44141 First Last Sorting(dp)</title>
    <link href="https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044141%20First%20Last%20Sorting(dp)/"/>
    <id>https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044141%20First%20Last%20Sorting(dp)/</id>
    <published>2020-06-26T11:55:40.748Z</published>
    <updated>2020-03-26T12:53:05.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44141" target="_blank" rel="noopener">题目链接</a></p><p>给你一个1~n（n &lt;= 1e5）随机排列的序列，你有两种操作， 把第i个移到对首或者队尾。为最少移动几次能让 ai = i(也就是1， 2， 3， … ,  n)</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>正难则反， 我们只要求出严格上升的子序列的长度ans， 那么用 n - ans 就是答案</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">power by Solo_Dance</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll ll_max = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;<span class="keyword">bool</span> f = <span class="number">0</span>;<span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">1</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt;= <span class="string">'9'</span> &amp;&amp; ch &gt;= <span class="string">'0'</span>) &#123;res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f ? (~res + <span class="number">1</span>) : res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dp[N]; <span class="comment">// dp[i]表示以i结尾的严格上升的最长子序列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = read();</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> x = read();</span><br><span class="line">        dp[x] = dp[x - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        ans = max(ans, dp[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; n - ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>恰似你一低头的温柔，较弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  --mingfuyan千万不要图快——如果没有足够的时间用来实践， 那么学得快， 忘得也快。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44141&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你一个1~n（n &amp;lt;= 1e5）随机排列的序列，你有两种操作， 把第i个移到对首或者队尾。为最少移动几次能让 ai = i(也就是1， 2， 3， … ,  n)&lt;/p&gt;
    
    </summary>
    
    
      <category term="dp" scheme="https://solodance.top/categories/dp/"/>
    
    
      <category term="Acm" scheme="https://solodance.top/tags/Acm/"/>
    
      <category term="dp" scheme="https://solodance.top/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>计蒜客 - 44120 Circuit Counting(dp).md</title>
    <link href="https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044120%20Circuit%20Counting(dp)/"/>
    <id>https://solodance.top/2020/06/26/%E8%AE%A1%E8%92%9C%E5%AE%A2%20-%2044120%20Circuit%20Counting(dp)/</id>
    <published>2020-06-26T11:55:40.747Z</published>
    <updated>2020-04-20T12:27:30.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><a href="https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44120" target="_blank" rel="noopener">题目链接</a></p><p>给你n个点，求满足所有x坐标之和为0， 所有y坐标之和为0， 的真子集的数量。</p><p>|x| &lt;= 10,  |y| &lt;= 10,  n &lt;= 40</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>唉， 愣是没想到用dp， 傻了吧唧的</p><p>设 dp[i][x][y] 为前i个点， x坐标值和为x， y坐标和为y的集合的数量。</p><p><code>dp[i][x][y] = dp[i - 1][x][y] + dp[i - 1][x - xi][y - yi]</code></p><p>可以滚动减少大量空间。</p><p>注意， x，y坐标之和最大为 400 最小为 -400， 我们设初始状态为 <code>dp[0][400][400] = 1</code>， 最终答案就是<code>dp[0][400][400]</code> 或者 <code>dp[1][400][400]</code></p><p>这样 x，y坐标之和最大为 800 最小为 0。</p><p>当然你设成初始状态 <code>dp[0][500][500] = 1</code>也可以， 答案也会相应的改。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">power by Solo_Dance</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll ll_max = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;<span class="keyword">bool</span> f = <span class="number">0</span>;<span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">1</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt;= <span class="string">'9'</span> &amp;&amp; ch &gt;= <span class="string">'0'</span>) &#123;res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f ? (~res + <span class="number">1</span>) : res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll f[<span class="number">2</span>][<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = read();</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">400</span>][<span class="number">400</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        flag = !flag;</span><br><span class="line">        <span class="keyword">int</span> x = read(), y = read();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">1000</span>; ++j)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">1000</span>; ++k)&#123;</span><br><span class="line">                f[flag][j][k] = f[flag ^ <span class="number">1</span>][j][k];</span><br><span class="line">                <span class="keyword">if</span> (j - x &gt;= <span class="number">0</span> &amp;&amp; k - y &gt;= <span class="number">0</span> &amp;&amp; j - x &lt;= <span class="number">1000</span> &amp;&amp; k - y &lt;= <span class="number">1000</span>)</span><br><span class="line">                    f[flag][j][k] += f[flag ^ <span class="number">1</span>][j - x][k - y];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f[flag][<span class="number">400</span>][<span class="number">400</span>] - <span class="number">1</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>恰似你一低头的温柔，较弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  --mingfuyan千万不要图快——如果没有足够的时间用来实践， 那么学得快， 忘得也快。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://vjudge.net/problem/%E8%AE%A1%E8%92%9C%E5%AE%A2-44120&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给你n个点，求满足所有x坐标之和为0， 所有y坐标之和为0， 的真子集的数量。&lt;/p&gt;
&lt;p&gt;|x| &amp;lt;= 10,  |y| &amp;lt;= 10,  n &amp;lt;= 40&lt;/p&gt;
    
    </summary>
    
    
      <category term="dp" scheme="https://solodance.top/categories/dp/"/>
    
    
      <category term="Acm" scheme="https://solodance.top/tags/Acm/"/>
    
      <category term="dp" scheme="https://solodance.top/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>解决爆栈问题，手动加栈</title>
    <link href="https://solodance.top/2020/06/26/%E8%A7%A3%E5%86%B3%E7%88%86%E6%A0%88%E9%97%AE%E9%A2%98%EF%BC%8C%E6%89%8B%E5%8A%A8%E5%8A%A0%E6%A0%88/"/>
    <id>https://solodance.top/2020/06/26/%E8%A7%A3%E5%86%B3%E7%88%86%E6%A0%88%E9%97%AE%E9%A2%98%EF%BC%8C%E6%89%8B%E5%8A%A8%E5%8A%A0%E6%A0%88/</id>
    <published>2020-06-26T11:55:40.745Z</published>
    <updated>2019-11-03T08:34:10.228Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解决爆栈问题，手动加栈"><a href="#解决爆栈问题，手动加栈" class="headerlink" title="解决爆栈问题，手动加栈"></a>解决爆栈问题，手动加栈</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(linker,<span class="meta-string">"/STACK:1024000000,1024000000"</span>)</span></span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">恰似你一低头的温柔，娇弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  <span class="comment">--mingfuyan</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;解决爆栈问题，手动加栈&quot;&gt;&lt;a href=&quot;#解决爆栈问题，手动加栈&quot; class=&quot;headerlink&quot; title=&quot;解决爆栈问题，手动加栈&quot;&gt;&lt;/a&gt;解决爆栈问题，手动加栈&lt;/h3&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="acm小知识" scheme="https://solodance.top/categories/acm%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="acm" scheme="https://solodance.top/tags/acm/"/>
    
      <category term="手动加栈" scheme="https://solodance.top/tags/%E6%89%8B%E5%8A%A8%E5%8A%A0%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>解决ShadowsocksR 1080 端口被占用问题</title>
    <link href="https://solodance.top/2020/06/26/%E8%A7%A3%E5%86%B3ShadowsocksR%201080%20%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://solodance.top/2020/06/26/%E8%A7%A3%E5%86%B3ShadowsocksR%201080%20%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-26T11:55:40.744Z</published>
    <updated>2019-10-16T08:03:58.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解决ShadowsocksR-1080-端口被占用问题"><a href="#解决ShadowsocksR-1080-端口被占用问题" class="headerlink" title="解决ShadowsocksR 1080 端口被占用问题"></a>解决ShadowsocksR 1080 端口被占用问题</h3><p>除了系统补丁会保留端口外，开启win10的<code>hyper-v</code>也会保留端口，比如我自己。</p><p>最简单的方法， 找到ssr根目录。 打开 <code>gui-config.json</code>， <img src="http://imglf4.nosdn0.126.net/img/T0t4Z3Z5a254aFFRS09XcGs2V0VOaVEwejNlUW5HU25QYTNmU1FnenZlUHZrNXdFdk9mcHVRPT0.png?imageView&thumbnail=1680x0&quality=96&stripmeta=0" alt="1"></p><p>将 localPort 1080  随便弄一个没保留的端口即可。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">恰似你一低头的温柔，娇弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  <span class="comment">--mingfuyan</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;解决ShadowsocksR-1080-端口被占用问题&quot;&gt;&lt;a href=&quot;#解决ShadowsocksR-1080-端口被占用问题&quot; class=&quot;headerlink&quot; title=&quot;解决ShadowsocksR 1080 端口被占用问题&quot;&gt;&lt;/a&gt;解决Sha
      
    
    </summary>
    
    
      <category term="零碎小知识" scheme="https://solodance.top/categories/%E9%9B%B6%E7%A2%8E%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="acm" scheme="https://solodance.top/tags/acm/"/>
    
      <category term="ssr" scheme="https://solodance.top/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>给结构体初始化和定义优先级</title>
    <link href="https://solodance.top/2020/06/26/%E7%BB%99%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%AE%9A%E4%B9%89%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>https://solodance.top/2020/06/26/%E7%BB%99%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E5%AE%9A%E4%B9%89%E4%BC%98%E5%85%88%E7%BA%A7/</id>
    <published>2020-06-26T11:55:40.743Z</published>
    <updated>2019-07-22T10:33:05.329Z</updated>
    
    <content type="html"><![CDATA[<p>结构体初始化和定义优先级</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    ll cost;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> node&amp;another) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cost + dis[to] &gt; another.cost + dis[another.to];   <span class="comment">// &lt;"为从大到小排列，"&gt;"为从小到大排列   </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node a, <span class="keyword">const</span> node b)&#123;</span><br><span class="line">    <span class="keyword">return</span> n1.to &lt; n2.to; <span class="comment">// &lt;"为从大到小排列，"&gt;"为从小到大排列   </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    node(<span class="keyword">int</span> a,ll c):to(a),cost(c) &#123;&#125; <span class="comment">//为了能让node() 这个行为合法</span></span><br><span class="line">    node()&#123;</span><br><span class="line">        to=<span class="number">0</span>;</span><br><span class="line">        cost=INF;</span><br><span class="line">    &#125;<span class="comment">//结构体初始化</span></span><br><span class="line"></span><br><span class="line">    node(<span class="keyword">int</span> a = <span class="number">0</span>, ll c = <span class="number">0</span>) : to(a), cost(c) &#123;&#125;  <span class="comment">//初始化 加 让node() 这个行为合法</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>恰似你一低头的温柔，较弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  –mingfuyan<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;结构体初始化和定义优先级&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp
      
    
    </summary>
    
    
      <category term="acm小知识" scheme="https://solodance.top/categories/acm%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="acm" scheme="https://solodance.top/tags/acm/"/>
    
      <category term="小知识" scheme="https://solodance.top/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>给定两个区间， 判断有多少组数是给定数的倍数</title>
    <link href="https://solodance.top/2020/06/26/%E7%BB%99%E5%AE%9A%E4%B8%A4%E4%B8%AA%E5%8C%BA%E9%97%B4%EF%BC%8C%20%E5%88%A4%E6%96%AD%E6%9C%89%E5%A4%9A%E5%B0%91%E7%BB%84%E6%95%B0%E6%98%AF%E7%BB%99%E5%AE%9A%E6%95%B0%E7%9A%84%E5%80%8D%E6%95%B0/"/>
    <id>https://solodance.top/2020/06/26/%E7%BB%99%E5%AE%9A%E4%B8%A4%E4%B8%AA%E5%8C%BA%E9%97%B4%EF%BC%8C%20%E5%88%A4%E6%96%AD%E6%9C%89%E5%A4%9A%E5%B0%91%E7%BB%84%E6%95%B0%E6%98%AF%E7%BB%99%E5%AE%9A%E6%95%B0%E7%9A%84%E5%80%8D%E6%95%B0/</id>
    <published>2020-06-26T11:55:40.741Z</published>
    <updated>2019-10-07T13:19:19.005Z</updated>
    
    <content type="html"><![CDATA[<h3 id="例题：-2017（简单）"><a href="#例题：-2017（简单）" class="headerlink" title="例题： 2017（简单）"></a>例题： 2017（简单）</h3><p><a href="https://ac.nowcoder.com/acm/contest/1110/G" target="_blank" rel="noopener">题目链接</a></p><p><img src="http://imglf5.nosdn0.126.net/img/T0t4Z3Z5a254aFJOaHdaQVM1U2lLdHZYT3hya1hMVGthUjJkWVBUZHdhQ2M4SHArbkc1b29BPT0.png?imageView&thumbnail=1680x0&quality=96&stripmeta=0" alt="1"></p><p><strong>题目大意</strong><br>给4个数a, b, c, d， 问有多少对(x, y) <code>a &lt;= x &lt;= b</code>， <code>c &lt;= y &lt;= d</code> 并且<code>x * y % 2017 == 0</code> 。</p><p><strong>分析</strong><br>因为2017是质数， 所以只需要 求 [a, b]中2017的个数 乘以 [c, d]中1的个数 加上 [c, d] 中2017 的个数 乘以 [a, b] 中1的个数， 减去  [a, b]中2017的个数 乘以 [c, d] 中2017 的个数(去重)。</p><p><strong>AC代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll llINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    ll a, b, c, d;</span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d)&#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        a--, c--;</span><br><span class="line">        ans += (b / <span class="number">2017</span> - a / <span class="number">2017</span>) * (d - c);</span><br><span class="line">        ans += (d / <span class="number">2017</span> - c / <span class="number">2017</span>) * (b - a);</span><br><span class="line">        ans -= (b / <span class="number">2017</span> - a / <span class="number">2017</span>) * (d / <span class="number">2017</span> - c / <span class="number">2017</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：-2018（普通）"><a href="#例题：-2018（普通）" class="headerlink" title="例题： 2018（普通）"></a>例题： 2018（普通）</h3><p><a href="https://ac.nowcoder.com/acm/contest/1107/K" target="_blank" rel="noopener">题目链接</a></p><p><img src="http://imglf5.nosdn0.126.net/img/T0t4Z3Z5a254aFJOaHdaQVM1U2lLdkswdUNEbnBvNmtPQldpZFJIeVR2Wm14b1VOUkdiSk5BPT0.png?imageView&thumbnail=1680x0&quality=96&stripmeta=0" alt="1"></p><p><strong>题目大意</strong><br>给4个数a, b, c, d， 问有多少对(x, y) <code>a &lt;= x &lt;= b</code>， <code>c &lt;= y &lt;= d</code> 并且<code>x * y % 2018 == 0</code> 。</p><p><strong>分析</strong><br>由于2018只有四个因数， 也是简单了不少。<br>所以 需要 求 [a, b]中2018的个数 乘以 [c, d]中1的个数 加上 [c, d] 中2018 的个数 乘以 [a, b] 中1的个数，  减去  [a, b]中2018的个数 乘以 [c, d] 中2018 的个数(去重)。<br>求 [a, b]中1009的个数 乘以 [c, d]中2的个数 加上 [c, d] 中1009 的个数 乘以 [a, b] 中2的个数， 不需要去重， 因为不可能有重复的。</p><p><strong>AC代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll llINF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">ll _(ll x)&#123;</span><br><span class="line">    x /= <span class="number">1009</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &amp; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> x / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    ll a, b, c, d;</span><br><span class="line">    ll ans;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d)&#123;</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        a--, c--;</span><br><span class="line">        ans += (b / <span class="number">2018</span> - a / <span class="number">2018</span>) * (d - c);</span><br><span class="line">        ans += (d / <span class="number">2018</span> - c / <span class="number">2018</span>) * (b - a);</span><br><span class="line">        ans += (_(b) - _(a)) * (d / <span class="number">2</span> - c / <span class="number">2</span> - d / <span class="number">2018</span> + c / <span class="number">2018</span>);</span><br><span class="line">        ans += (_(d) - _(c)) * (b / <span class="number">2</span> - a / <span class="number">2</span> - b / <span class="number">2018</span> + a / <span class="number">2018</span>);</span><br><span class="line">        ans -= (b / <span class="number">2018</span> - a / <span class="number">2018</span>) * (d / <span class="number">2018</span> - c / <span class="number">2018</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：-2016（困难）"><a href="#例题：-2016（困难）" class="headerlink" title="例题： 2016（困难）"></a>例题： 2016（困难）</h3><p><a href="https://ac.nowcoder.com/acm/contest/1112/A" target="_blank" rel="noopener">题目链接</a><br><img src="http://imglf6.nosdn0.126.net/img/T0t4Z3Z5a254aFJOaHdaQVM1U2lLa0dzSXpiZGYzZVRiWEoxRDd5bzBRb2Y4bkZVTzJJU053PT0.png?imageView&thumbnail=1680x0&quality=96&stripmeta=0" alt="1"></p><p><strong>题目大意</strong></p><p>给2个数n, m， 问有多少对(x, y) <code>1 &lt;= x &lt;= n</code>， <code>1 &lt;= y &lt;= m</code> 并且<code>x * y % 2016 == 0</code> 。</p><p><strong>分析</strong><br>2016有36个因子， 再用这种方法就有点难受咯。<br>讲讲比较正的解法。<br>任何一个数a 都可以表示为 <code>a = a / 2016 * 2016 + a % 2016</code> 所以只要求 <code>(x % 2016 * y % 2016) % 2016 == 0</code> 对于(x, y ) 有多少对。<br>具体看AC代码</p><p><strong>AC代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll n, m;</span><br><span class="line"><span class="keyword">int</span> num1[<span class="number">2020</span>], num2[<span class="number">2020</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m) != EOF) &#123;</span><br><span class="line">        <span class="comment">// num1[i] n % 2016 == i 的个数</span></span><br><span class="line">        <span class="comment">// num2[i] m % 2016 == i 的个数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2015</span>; i++) num1[i] = n / <span class="number">2016</span>, num2[i] = m / <span class="number">2016</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2015</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= n % <span class="number">2016</span>) num1[i]++;</span><br><span class="line">            <span class="keyword">if</span> (i &lt;= m % <span class="number">2016</span>) num2[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2015</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2015</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i * j % <span class="number">2016</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    ans += num1[i] * num2[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">恰似你一低头的温柔，娇弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  <span class="comment">--mingfuyan</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;例题：-2017（简单）&quot;&gt;&lt;a href=&quot;#例题：-2017（简单）&quot; class=&quot;headerlink&quot; title=&quot;例题： 2017（简单）&quot;&gt;&lt;/a&gt;例题： 2017（简单）&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.c
      
    
    </summary>
    
    
      <category term="总结" scheme="https://solodance.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="acm" scheme="https://solodance.top/tags/acm/"/>
    
      <category term="总结" scheme="https://solodance.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>给出三角形三个点的坐标求三角形面积</title>
    <link href="https://solodance.top/2020/06/26/%E7%BB%99%E5%87%BA%E4%B8%89%E8%A7%92%E5%BD%A2%E4%B8%89%E4%B8%AA%E7%82%B9%E7%9A%84%E5%9D%90%E6%A0%87%E6%B1%82%E4%B8%89%E8%A7%92%E5%BD%A2%E9%9D%A2%E7%A7%AF/"/>
    <id>https://solodance.top/2020/06/26/%E7%BB%99%E5%87%BA%E4%B8%89%E8%A7%92%E5%BD%A2%E4%B8%89%E4%B8%AA%E7%82%B9%E7%9A%84%E5%9D%90%E6%A0%87%E6%B1%82%E4%B8%89%E8%A7%92%E5%BD%A2%E9%9D%A2%E7%A7%AF/</id>
    <published>2020-06-26T11:55:40.740Z</published>
    <updated>2019-07-23T01:44:26.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="给出三角形三个点的坐标求三角形面积"><a href="#给出三角形三个点的坐标求三角形面积" class="headerlink" title="给出三角形三个点的坐标求三角形面积"></a>给出三角形三个点的坐标求三角形面积</h2><p>在平面解析几何会学到。<br>设A(x1, y1)， B(x2, y2)， C(x3, y3)<br>由A –&gt;B–&gt;C–&gt;A按逆时针方向转。（行列式书写要求）<br>（其实 并不非要按照逆时针旋转， 最后求得时候取一个<strong>绝对值</strong>就行了</p><p>S = （1 / 2 ) * （行列式）<br>|x1 y1 1|<br>|x2 y2 1|<br>|x3 y3 1|</p><p>即公式为</p><p><code>S = (1 / 2) * (x1 * y2 + x2 * y3 + x3 * y1 - x3 * y2 + x2 * y1 + x1 * y3)</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;给出三角形三个点的坐标求三角形面积&quot;&gt;&lt;a href=&quot;#给出三角形三个点的坐标求三角形面积&quot; class=&quot;headerlink&quot; title=&quot;给出三角形三个点的坐标求三角形面积&quot;&gt;&lt;/a&gt;给出三角形三个点的坐标求三角形面积&lt;/h2&gt;&lt;p&gt;在平面解析几何会学到
      
    
    </summary>
    
    
      <category term="acm小知识" scheme="https://solodance.top/categories/acm%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="acm" scheme="https://solodance.top/tags/acm/"/>
    
      <category term="给出三角形三点坐标求面积" scheme="https://solodance.top/tags/%E7%BB%99%E5%87%BA%E4%B8%89%E8%A7%92%E5%BD%A2%E4%B8%89%E7%82%B9%E5%9D%90%E6%A0%87%E6%B1%82%E9%9D%A2%E7%A7%AF/"/>
    
      <category term="数学知识" scheme="https://solodance.top/tags/%E6%95%B0%E5%AD%A6%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>组合数打表模板</title>
    <link href="https://solodance.top/2020/06/26/%E7%BB%84%E5%90%88%E6%95%B0%E6%89%93%E8%A1%A8%E6%A8%A1%E6%9D%BF/"/>
    <id>https://solodance.top/2020/06/26/%E7%BB%84%E5%90%88%E6%95%B0%E6%89%93%E8%A1%A8%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-06-26T11:55:40.739Z</published>
    <updated>2019-09-05T06:25:28.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="组合数打表模板"><a href="#组合数打表模板" class="headerlink" title="组合数打表模板"></a>组合数打表模板</h3><p>组合数打表模板,适用于N&lt;=3000<br>c[i][j]表示从i个中选j个的选法。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> C[N][N];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_C</span><span class="params">(<span class="keyword">int</span> maxn)</span> </span>&#123;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; i++) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">            C[i][j] = C[i - <span class="number">1</span>][j] + C[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % mod;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">恰似你一低头的温柔，娇弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  <span class="comment">--mingfuyan</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;组合数打表模板&quot;&gt;&lt;a href=&quot;#组合数打表模板&quot; class=&quot;headerlink&quot; title=&quot;组合数打表模板&quot;&gt;&lt;/a&gt;组合数打表模板&lt;/h3&gt;&lt;p&gt;组合数打表模板,适用于N&amp;lt;=3000&lt;br&gt;c[i][j]表示从i个中选j个的选法。 &lt;/p&gt;
      
    
    </summary>
    
    
      <category term="总结" scheme="https://solodance.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="acm" scheme="https://solodance.top/tags/acm/"/>
    
      <category term="组合数打表" scheme="https://solodance.top/tags/%E7%BB%84%E5%90%88%E6%95%B0%E6%89%93%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>矩形相交问题</title>
    <link href="https://solodance.top/2020/06/26/%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%BA%A4%E9%97%AE%E9%A2%98/"/>
    <id>https://solodance.top/2020/06/26/%E7%9F%A9%E9%98%B5%E7%9B%B8%E4%BA%A4%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-26T11:55:40.736Z</published>
    <updated>2019-06-10T10:27:25.761Z</updated>
    
    <content type="html"><![CDATA[<p>给出矩形的 对角线上的两个点的坐标 (x11, y11)， (x12, y12)， (x21, y21), (x22, y22)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x01 = max(min(x11, x12), min(x21, x22));</span><br><span class="line"><span class="keyword">int</span> x02 = min(max(x11, x12), max(x21, x22));</span><br><span class="line"><span class="keyword">int</span> y01 = max(min(y11, y12), min(y21, y22));</span><br><span class="line"><span class="keyword">int</span> y02 = min(max(y11, y12), max(y21, y22));</span><br><span class="line"><span class="keyword">if</span> (x01 &lt; x02 &amp;&amp; y01 &lt; y02)&#123;</span><br><span class="line">    <span class="comment">// 说明这两个矩形相交</span></span><br><span class="line">    <span class="keyword">int</span> s = (x02 - x01) * (y02 - y01); <span class="comment">// 相交的面积</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123; <span class="comment">// 这两个不相交</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题-："><a href="#例题-：" class="headerlink" title="例题 ："></a>例题 ：</h2><p><img src="http://imglf5.nosdn0.126.net/img/T0t4Z3Z5a254aFJVTmRISHoxTnJ1QlI0VDhQSjE1cjlmRWV0Mlh0bVVaOTk4V2FySDg4amN3PT0.jpg?imageView&thumbnail=2339y1653&type=jpg&quality=96&stripmeta=0&type=jpg" alt="题目页面1"><br><img src="http://imglf5.nosdn0.126.net/img/T0t4Z3Z5a254aFJVTmRISHoxTnJ1S1F6eUMyZTJKTnZoeWF0NlRhb1ViZ1dHZkF0Y1RZNjRnPT0.jpg?imageView&thumbnail=2339y1653&type=jpg&quality=96&stripmeta=0&type=jpg" alt="题目页面2"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line">    ll sum, s;</span><br><span class="line">&#125;arc[<span class="number">5005</span>];</span><br><span class="line"><span class="keyword">int</span> x01, x02, y01, y02;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            arc[i].sum= <span class="number">0</span>;</span><br><span class="line">            arc[i].s = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; arc[i].x1 &gt;&gt; arc[i].y1 &gt;&gt; arc[i].x2 &gt;&gt; arc[i].y2;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++)&#123;</span><br><span class="line">                x01 = max(min(arc[i].x1, arc[i].x2), min(arc[j].x1, arc[j].x2));</span><br><span class="line">                x02 = min(max(arc[i].x1, arc[i].x2), max(arc[j].x1, arc[j].x2));</span><br><span class="line">                y01 = max(min(arc[i].y1, arc[i].y2), min(arc[j].y1, arc[j].y2));</span><br><span class="line">                y02 = min(max(arc[i].y1, arc[i].y2), max(arc[j].y1, arc[j].y2));</span><br><span class="line">                <span class="keyword">if</span> (x01 &lt; x02 &amp;&amp; y01 &lt; y02)&#123;</span><br><span class="line">                    arc[i].sum++;</span><br><span class="line">                    arc[i].s += (x02 - x01) * (y02 - y01);</span><br><span class="line">                    arc[j].sum++;</span><br><span class="line">                    arc[j].s += (x02 - x01) * (y02 - y01);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; arc[i].sum &lt;&lt; <span class="string">' '</span> &lt;&lt; arc[i].s &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;给出矩形的 对角线上的两个点的坐标 (x11, y11)， (x12, y12)， (x21, y21), (x22, y22)。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
      <category term="acm小知识" scheme="https://solodance.top/categories/acm%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="acm" scheme="https://solodance.top/tags/acm/"/>
    
      <category term="小技巧" scheme="https://solodance.top/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
      <category term="矩形相交" scheme="https://solodance.top/tags/%E7%9F%A9%E5%BD%A2%E7%9B%B8%E4%BA%A4/"/>
    
  </entry>
  
  <entry>
    <title>矩阵求A的1到n的幂次之和</title>
    <link href="https://solodance.top/2020/06/26/%E7%9F%A9%E9%98%B5%E6%B1%82A%E7%9A%841%E5%88%B0n%E7%9A%84%E5%B9%82%E6%AC%A1%E4%B9%8B%E5%92%8C%EF%BC%88%E7%9F%A9%E9%98%B5%E6%9E%84%E9%80%A0%EF%BC%89/"/>
    <id>https://solodance.top/2020/06/26/%E7%9F%A9%E9%98%B5%E6%B1%82A%E7%9A%841%E5%88%B0n%E7%9A%84%E5%B9%82%E6%AC%A1%E4%B9%8B%E5%92%8C%EF%BC%88%E7%9F%A9%E9%98%B5%E6%9E%84%E9%80%A0%EF%BC%89/</id>
    <published>2020-06-26T11:55:40.735Z</published>
    <updated>2020-03-10T05:40:40.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>给你一个n*n(n &lt;= 30)的矩阵A， 每个元素x（0 &lt;=x&lt;= 1e6 ）， 给你一个m（m &lt;= 1e9）， 求S = A + A^2 + A ^3 + … + A^m,其中对每个元素对1e9+7取余。</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这里有另一种做法， <a href="https://www.cnblogs.com/hua-dong/p/8479103.html" target="_blank" rel="noopener">点此</a></p><p>对于A矩阵， 我们可以构造一个这样的矩阵B</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">A A</span>|</span><br><span class="line">|<span class="string">0 E</span>|</span><br></pre></td></tr></table></figure><p>B^2为</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">A^2 A + A^2</span>|</span><br><span class="line">|<span class="string">0   E      </span>|</span><br></pre></td></tr></table></figure><p>B^3为</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|A^<span class="number">3</span> A + A^<span class="number">2</span> + A^<span class="number">3</span>|</span><br><span class="line">|<span class="number">0</span>   E            |</span><br></pre></td></tr></table></figure><p>因此只要求B^m 即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;<span class="keyword">bool</span> f = <span class="number">0</span>;<span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123;<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">1</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt;= <span class="string">'9'</span> &amp;&amp; ch &gt;= <span class="string">'0'</span>) &#123;res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>;ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f ? (~res + <span class="number">1</span>) : res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> dimx, dimy; <span class="comment">// 矩阵维度</span></span><br><span class="line">    ll m[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line">    matrix(<span class="keyword">int</span> x = <span class="number">60</span>, <span class="keyword">int</span> y = <span class="number">60</span>) &#123; <span class="comment">// 构造函数</span></span><br><span class="line">        ms(m, <span class="number">0</span>);</span><br><span class="line">        dimx = x, dimy = y;</span><br><span class="line">    &#125;</span><br><span class="line">    matrix <span class="keyword">operator</span>*(<span class="keyword">const</span> matrix &amp;x) <span class="keyword">const</span> &#123;</span><br><span class="line">        matrix c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dimx; ++i)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x.dimy; ++j)</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; dimy; ++k)</span><br><span class="line">                    c.m[i][j] = (c.m[i][j] + m[i][k] * x.m[k][j]) % mod;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">matrix <span class="title">qpow2</span><span class="params">(matrix a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    matrix ans = a;b--;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) ans = ans * a;</span><br><span class="line">        a = a * a;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = read(), m = read();</span><br><span class="line">    <span class="function">matrix <span class="title">a</span><span class="params">(<span class="number">2</span> * n, <span class="number">2</span> * n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">            a.m[i][j + n] = a.m[i][j] = read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &lt; <span class="number">2</span> * n; ++i) a.m[i][i] = <span class="number">1</span>;</span><br><span class="line">    a = qpow2(a, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &lt; <span class="number">2</span> * n; ++j)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, a.m[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (j != <span class="number">2</span> * n - <span class="number">1</span>) <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>恰似你一低头的温柔，较弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  --mingfuyan千万不要图快——如果没有足够的时间用来实践， 那么学得快， 忘得也快。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h2&gt;&lt;p&gt;给你一个n*n(n &amp;lt;= 30)的矩阵A， 每个元素x（0 &amp;lt;=x&amp;lt;= 1e6 ）， 给你一个m（m &amp;lt;= 1e9）， 求S = A + A^2 + A ^3 + … + A^m,其中对每个元素对1e9+7取余。&lt;/p&gt;
    
    </summary>
    
    
      <category term="矩阵" scheme="https://solodance.top/categories/%E7%9F%A9%E9%98%B5/"/>
    
    
      <category term="Acm" scheme="https://solodance.top/tags/Acm/"/>
    
      <category term="矩阵构造" scheme="https://solodance.top/tags/%E7%9F%A9%E9%98%B5%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>求n边形的面积</title>
    <link href="https://solodance.top/2020/06/26/%E6%B1%82n%E8%BE%B9%E5%BD%A2%E7%9A%84%E9%9D%A2%E7%A7%AF/"/>
    <id>https://solodance.top/2020/06/26/%E6%B1%82n%E8%BE%B9%E5%BD%A2%E7%9A%84%E9%9D%A2%E7%A7%AF/</id>
    <published>2020-06-26T11:55:40.733Z</published>
    <updated>2019-12-02T05:11:12.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p><a href="http://www.acmicpc.sdnu.edu.cn/problem/show/1334" target="_blank" rel="noopener">题目链接</a></p><p>给出正n边形n个点的坐标， 求n变形面积的2倍， <code>3&lt;=N&lt;=100000</code>，<code>0&lt;=xi,yi&lt;=10^9</code>，  <code>mod = 1000000007</code></p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eps 1e-8</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ms(a, b) memset((a), (b), sizeof(a))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll ll_max = <span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>; <span class="keyword">bool</span> f = <span class="number">0</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>) &#123; <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">1</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &lt;= <span class="string">'9'</span> &amp;&amp; ch &gt;= <span class="string">'0'</span>) &#123; res = (res &lt;&lt; <span class="number">3</span>) + (res &lt;&lt; <span class="number">1</span>) + ch - <span class="string">'0'</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">return</span> f ? (~ res  + <span class="number">1</span>) : res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    ll x, y;</span><br><span class="line">&#125;a[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n))&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) a[i].x = read(), a[i].y = read();</span><br><span class="line">        a[n] = a[<span class="number">0</span>];</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            ans = (ans + (a[i - <span class="number">1</span>].x * a[i].y - a[i].x * a[i - <span class="number">1</span>].y) % mod + mod) % mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">恰似你一低头的温柔，娇弱水莲花不胜寒风的娇羞， 我的心为你悸动不休。  <span class="comment">--mingfuyan</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目大意&quot;&gt;&lt;a href=&quot;#题目大意&quot; class=&quot;headerlink&quot; title=&quot;题目大意&quot;&gt;&lt;/a&gt;题目大意&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.acmicpc.sdnu.edu.cn/problem/show/1334&quot; tar
      
    
    </summary>
    
    
      <category term="acm小知识" scheme="https://solodance.top/categories/acm%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="acm" scheme="https://solodance.top/tags/acm/"/>
    
      <category term="小知识" scheme="https://solodance.top/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>根据算数表达式（中缀式）求波兰表达式和逆波兰表达式</title>
    <link href="https://solodance.top/2020/06/26/%E6%A0%B9%E6%8D%AE%E7%AE%97%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E4%B8%AD%E7%BC%80%E5%BC%8F%EF%BC%89%E6%B1%82%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://solodance.top/2020/06/26/%E6%A0%B9%E6%8D%AE%E7%AE%97%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E4%B8%AD%E7%BC%80%E5%BC%8F%EF%BC%89%E6%B1%82%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-06-26T11:55:40.732Z</published>
    <updated>2019-06-25T09:09:04.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="根据算数表达式（中缀式）求波兰表达式和逆波兰表达式"><a href="#根据算数表达式（中缀式）求波兰表达式和逆波兰表达式" class="headerlink" title="根据算数表达式（中缀式）求波兰表达式和逆波兰表达式"></a>根据算数表达式（中缀式）求波兰表达式和逆波兰表达式</h2><p>一共有两种求法，直接举例。<br>求 <code>y+(2-3*y+4)*((4+y)*2-y)</code> 的波兰表达式和逆波兰表达式。  </p><h3 id="第一种方法——直接画出二叉树"><a href="#第一种方法——直接画出二叉树" class="headerlink" title="第一种方法——直接画出二叉树"></a>第一种方法——直接画出二叉树</h3><p>直接画出二叉树根据前序和后序遍历求得波兰表达式和逆波兰表达式。<br><img src="http://imglf3.nosdn0.126.net/img/T0t4Z3Z5a254aFNPVkJVcWFrdnh3S2IrU3ozMlpKUVhzK3kzMFFHQ0dHMTduaHdLWng1WDdRPT0.png?imageView&thumbnail=1680x0&quality=96&stripmeta=0" alt="中缀式的二叉树"></p><p>波兰表达式： <code>+y*+-2*3y4-*+4y2y</code><br>逆波兰表达式： <code>y23y*-4+4y+2*y-*+</code>  </p><h3 id="第二种方法——括号替换法"><a href="#第二种方法——括号替换法" class="headerlink" title="第二种方法——括号替换法"></a>第二种方法——括号替换法</h3><p>求波兰表达式：  </p><ol><li>将中缀式的括号补全（保证一对括号里有且仅有一个直接的运算符）<br><code>(y+(((2-(3*y))+4)*(((4+y)*2)-y)))</code></li><li>将这一对括号中的运算符把前括号( 替换，忽略后括号）。<br><code>+y*+-2*3y4-*+4y2y</code></li></ol><p>求逆波兰表达式：  </p><ol><li>将中缀式的括号补全（保证一对括号里有且仅有一个直接的运算符）<br><code>(y+(((2-(3*y))+4)*(((4+y)*2)-y)))</code></li><li>将这一对括号中的运算符把后括号( 替换，忽略前括号）。<br><code>y23y*-4+4y+2*y-*+</code>  </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;根据算数表达式（中缀式）求波兰表达式和逆波兰表达式&quot;&gt;&lt;a href=&quot;#根据算数表达式（中缀式）求波兰表达式和逆波兰表达式&quot; class=&quot;headerlink&quot; title=&quot;根据算数表达式（中缀式）求波兰表达式和逆波兰表达式&quot;&gt;&lt;/a&gt;根据算数表达式（中缀式
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://solodance.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://solodance.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="波兰表达式" scheme="https://solodance.top/tags/%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="逆波兰表达式" scheme="https://solodance.top/tags/%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="二叉树" scheme="https://solodance.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构整理笔记（提纲） （数据结构 C语言版 第二版 严蔚敏）</title>
    <link href="https://solodance.top/2020/06/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
    <id>https://solodance.top/2020/06/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-26T11:55:40.731Z</published>
    <updated>2019-06-25T12:29:50.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>数据结构（这门学科）：</strong> 是一门研究数据的组织， 存储， 和运算的一般方法。  </p><p><strong>数据：</strong> 是客观事物的符号表示， 是所有能输入到计算机中并被计算机程序处理的符号的总称。  </p><p><strong>数据元素：</strong> 是数据的<strong>基本单位</strong>， 在计算机中通常作为一个整体进行考虑和处理。数据元素用于完整地描述一个对象。</p><p><strong>数据项：</strong> 组成数据元素的、 有独立含义的、 不可分割的最小单位。<em>例如</em> ：学生的姓名学号等。</p><p><strong>数据对象：</strong> 是性质相同的数据元素的集合， 是数据的一个子集。<strong>只要集合内的性质均相同， 都可称之为一个数据对象</strong>。  </p><p><strong>数据结构：</strong> 是相互之间存在一种或多种特定关系的数据元素的集合。  </p><p>数据结构  </p><ul><li>逻辑结构  <ul><li>集合结构（离散结构， 因为太简单， 所以不考虑）</li><li>线性结构</li><li>非线性结构<ul><li>树结构</li><li>图结构或网状结构</li></ul></li></ul></li><li>存储结构<ul><li>顺序存储结构</li><li>链式存储结构</li></ul></li></ul><p><strong>逻辑结构</strong><br>二元组 （D， R）  </p><ul><li>D是数据关系的集合</li><li>R是D关系上的集合<br>（） 代表无序 &lt;&gt; 代表有序</li></ul><h3 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h3><p><strong>抽象数据类型</strong> ： 一般指由用户定义的、 表示应用问题的数学模型， 以及定义在这个模型上的一组操作的总称。<br>具体包括三部分： 数据对象， 数据对象上关系的集合 以及 对数据对象的基本操作的集合。<br><strong>定义格式</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ADT 抽象数据类型名&#123;</span><br><span class="line">    数据对象:&lt;数据对象的定义&gt;</span><br><span class="line">    数据关系:&lt;数据关系的定义&gt;</span><br><span class="line">    基本操作:&lt;基本操作的定义&gt;</span><br><span class="line">&#125; ADT 抽象数据类型名</span><br></pre></td></tr></table></figure><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p><strong>算法</strong> ：是为了解决某类问题而规定的一个有限长的操作序列。<br><strong>重要特性</strong></p><ul><li>有穷性</li><li>确定性</li><li>可行性</li><li>输入</li><li>输出</li></ul><p><strong>评价算法优劣的基本标准</strong></p><ul><li>正确性 能在有限的运行时间内得到正确的结果。</li><li>可读性 </li><li>健壮性</li><li>高效性 时间空间</li></ul><p><strong>语句频度：</strong> 一条语句重复执行的次数</p><p><strong>算法的时间复杂度：</strong> （一般指的是最坏时间复杂度）</p><ul><li>常量阶实例  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100000000</span>; i++)&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"我爱你啊亲！"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>此算法时间复杂度 T(n) = O(1)。</li></ul><p><strong>算法的空间复杂度</strong></p><ul><li>常量阶<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n / <span class="number">2</span>; i++)&#123;</span><br><span class="line">    t = a[i];</span><br><span class="line">    a[i] = a[n - i + <span class="number">1</span>];</span><br><span class="line">    a[n - i - <span class="number">1</span>] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>线性阶<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    b[i] = a[n - i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    a[i] = b[i];</span><br></pre></td></tr></table></figure>此算法需要借助大小为n的辅助数组， 所以其空间复杂度为O(n)。</li></ul><h2 id="第二章-线性表"><a href="#第二章-线性表" class="headerlink" title="第二章 线性表"></a>第二章 线性表</h2><p><strong>线性表：</strong> 由n（n &gt;= 0）个数据特性相同的元素构成的有限序列。<br><strong>空表：</strong> n = 0的线性表。</p><p>非空的线性表或线性结构的特点：<br>（1） 存在唯一的一个被称作“第一个”的数据元素；<br>（2） 存在唯一的一个被称作“最后一个”的数据元素；<br>（3） 除第一个元素外， 结构中的每个数据元素均只有一个前驱；<br>（4） 除最后一个元素外， 结构中的每个数据元素均只有一个后继。</p><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>线性表的顺序存储结构是一种<strong>随机存取</strong>的存储结构。</p><p><strong>平均查找长度：</strong> 在查找时， 为确定元素在顺序表中的位置， 需和给定的值进行比较的数据元素个数的期望值称为查找算法在查找成功时的平均查找长度（Average Search Length ASL）</p><ul><li>假设pi 是查找第i个元素的概率， Ci 为找到其中关键字与给定值相等的第i个记录时， 和给定值已进行过比较的关键字个数， 则在长度为n的线性表中， 查找成功时的平均查找长度为<code>ASL = piCi （i : 1 - n 之和）</code></li></ul><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>链表这东西没什么好说的， 会一些基本的操作就行。</p><h3 id="待解决的问题"><a href="#待解决的问题" class="headerlink" title="待解决的问题"></a>待解决的问题</h3><p>把链表的基本操作写一下。</p><h2 id="第三章-栈和队列"><a href="#第三章-栈和队列" class="headerlink" title="第三章 栈和队列"></a>第三章 栈和队列</h2><h3 id="栈-（后进先出的数据结构（Last-In-First-Out-LIFO））"><a href="#栈-（后进先出的数据结构（Last-In-First-Out-LIFO））" class="headerlink" title="栈 （后进先出的数据结构（Last In First Out, LIFO））"></a>栈 （后进先出的数据结构（Last In First Out, LIFO））</h3><p>栈顶， 栈底。</p><ul><li>顺序栈  </li><li>链栈</li><li><em>递归*</em>： </li></ul><ol><li>定义是递归的 比如： 阶乘，二阶Fibonacci数列<ul><li>分治法：</li><li>能将一个问题变成一个新问题， 而新问题与原问题的解法相同或类同， 不同的仅是处理的对象， 并且这些处理对象更小且变化有规律。</li><li>可以通过上述转化而使问题简化。</li><li>必须有一个明确的递归出口， 或称递归的边界。</li></ul></li><li>数据结构是递归的 比如： 链表</li><li>问题的解法是递归的 比如： Hanoi塔问题， 八皇后问题， 迷宫问题</li></ol><p><strong>递归的算法效率分析：</strong>通过迭代法求解递归方程来计算时间复杂度。</p><h3 id="队列-（先进先出的数据结构（First-In-First-Out-FIFO））"><a href="#队列-（先进先出的数据结构（First-In-First-Out-FIFO））" class="headerlink" title="队列 （先进先出的数据结构（First In First Out, FIFO））"></a>队列 （先进先出的数据结构（First In First Out, FIFO））</h3><p>队头， 队尾</p><ul><li><p>顺序队列（循环队列）<br>少用一个元素空间；<br>队空的条件： Q.front == Q.rear<br>队满的条件： (Q.rear + 1) % MAXQSIZE == Q.front</p></li><li><p>链队</p></li></ul><h3 id="遗留的问题"><a href="#遗留的问题" class="headerlink" title="遗留的问题"></a>遗留的问题</h3><p>链栈， 顺序队， 链队的代码</p><h2 id="第四章-串、数组和广义表"><a href="#第四章-串、数组和广义表" class="headerlink" title="第四章 串、数组和广义表"></a>第四章 串、数组和广义表</h2><h3 id="串（或字符串）"><a href="#串（或字符串）" class="headerlink" title="串（或字符串）"></a>串（或字符串）</h3><p><strong>串的模式匹配算法</strong></p><ol><li>BF算法（Brute-Force）<br>就是暴力、这个 太简单就不写代码了。</li><li>KMP算法<br>最主要的是如何构造next数组和nextval数组<ul><li>next数组（模式串）：</li></ul><ol><li>0    j = 1</li><li>max k(1 &lt; k &lt; j)  ‘p1 p2 … p(k - 1)’  == ‘p(j - k + 1) … p(j - 2) p(j - 1)’<br>通俗的来说 就是看 j 前面的 k - 1（1 &lt; k &lt; j）字符 和 从 1 到k - 1的字符是不是一样</li><li>1 一个字符都不匹配</li></ol><ul><li>nextval数组</li></ul><ol><li>求出next数组</li><li>根据next数组判断 s[j] ?= s[next[j]]<br>如果相等 nextval[j] = next[next[j]]<br>如果不想等(不相等) nextval[j] = next[j]</li></ol></li></ol><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组很简单就不说了</p><h3 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h3><p>就把一些基本的定义弄熟就行了<br>广义表一般记作<code>LS = (a1, a2, a2, ..., an)</code> 其中LS是这个广义表的名称， n为其长度。<br>ai 可以是单个元素， 也可以是广义表 分别称为 广义表LS的原子和字表。<br>习惯上， 用大写字母表示广义表的名称， 用小写字母表示原子。<br>显然， 广义表的定义是一个递归的定义， 因为在描述广义表时又用到了广义表的概念。<br><strong>例子</strong></p><ol><li>A = () —— A是一个空表， 其长度为0。</li><li>B = (e) —— B只有一个原子e，其长度为1。</li><li>C = (a, (b, c, d)) —— C的长度为2， 两个元素分别为原子a和字表(b, c, d)。</li><li>D = (A, B, C) —— D的长度为3， 三个字表都是广义表。</li><li>E = (a, E) —— 这是一个递归表， 长度为2。E 相当于一个无限的广义表 E = (a, (a, (a, …)))。</li></ol><p><strong>概念</strong></p><ul><li>表头（是一个元素）： 为非空广义表的以一个元素， 它可以是一个原子也可以是一个子表。  </li><li>表尾（是一个广义表）：除表头之外， 由其余元素构成的表。（若只有一个元素， 那么其为空表）。 </li></ul><h3 id="遗留的问题-1"><a href="#遗留的问题-1" class="headerlink" title="遗留的问题"></a>遗留的问题</h3><ol><li>KMP算法的实现</li></ol><h2 id="第五章-树和二叉树"><a href="#第五章-树和二叉树" class="headerlink" title="第五章 树和二叉树"></a>第五章 树和二叉树</h2><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><p><strong>树</strong>： 是n（n &gt;= 0）个结点的有限集， 它或为空树；或为非空树， 对于非空树T：</p><ol><li>有且仅有一个称之为根的结点。</li><li>除根结点以外的其余结点可分为m(m &gt; 0) 个互不相交的有限集T1, T2, …, TM, 其中每一个集合本身又是一棵树， 并且称之为根的子树（SubTree）。</li></ol><p><strong>树的基本术语</strong></p><ol><li><strong>结点</strong>：树中的一个独立单元。包含一个数据元素及若干指向其子树的分支 。</li><li><strong>结点的度</strong>： 结点拥有的子树数。（这个结点后继的个数）。</li><li><strong>树的度</strong>： 树内各结点度的最大值。</li><li><strong>叶子</strong>： 度为0的结点称为叶子结点或者终端结点。</li><li><strong>非终端结点</strong>： 度不为0的结点称为非终端结点或者分支结点。 除根结点以外， 非终端结点也称为内部结点。</li><li><strong>双亲和孩子</strong>： 结点的子树的根称为该结点的孩子， 相应地， 该结点称为孩子的双亲。</li><li><strong>兄弟</strong>： 同一个双亲的孩子之间互称兄弟。</li><li><strong>祖先</strong>： 从根到该结点所经分支上的所有结点。</li><li><strong>子孙</strong>： 以某结点为根的子树中的任一结点都称为该结点的子孙。</li><li><strong>层次</strong>： 结点的层次从根开始定义起， 根为第一层， 根的孩子为第二层。 树中任一结点的层次等于其双亲结点的层次加一。</li><li><strong>堂兄弟</strong>： 双亲在同一层的结点互为堂兄弟。</li><li><strong>树的深度</strong>： 树中结点的最大层次称为树的深度或高度。</li><li><strong>有序树和无序树</strong>： 如果将树中结点的各子树看成从左到右是有次序的， 则称该树为有序树， 否则称为无序树。</li><li><strong>森林</strong>： 是m(m &gt;= 0) 课互不相交的树的集合。</li></ol><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p><strong>二叉树</strong>：是n (n &gt;= 0) 个结点所构成的集合。对于非空树T：</p><ol><li>有且仅有一个称之为根的结点。</li><li>除根结点外的其余结点分为两个互不相交的子集T1 和T2， 分别称为T的左子树和右子树。</li></ol><ul><li><strong>二叉树与树的区别</strong><ol><li>二叉树每个结点至多只有两棵子树。</li><li>二叉树是有序树。</li></ol></li><li><strong>二叉树的性质</strong><ol><li>在二叉树的第i层上至多有2 ^ (i - 1) 个结点（i &gt;= 1）。</li><li>深度为k的二叉树至多有2 ^ k - 1个结点。</li><li>对任何一棵二叉树T， 如果其终端结点数为n0， 度为2的结点数为n2， 则n0 = n2 + 1。</li></ol></li><li><em>证明*</em>：<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">设B为总分支数</span><br><span class="line">二叉树结点总数</span><br><span class="line">n = n0 + n1 + n2</span><br><span class="line">除了根结点外， 每一个结点都有一个分支进入则</span><br><span class="line">n = B + <span class="number">1</span></span><br><span class="line">由于这些分支是由度为<span class="number">1</span> 和度为<span class="number">2</span> 的结点射出的，所以</span><br><span class="line">B = n1 + <span class="number">2</span> * n2</span><br><span class="line">于是得</span><br><span class="line">n = n1 + <span class="number">2</span>* n2 + <span class="number">1</span></span><br><span class="line">所以</span><br><span class="line">n0 = n2 + <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>对于任意一棵树</strong>：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">树的总结点个数为</span><br><span class="line">n = n1 + n2 + ... + nk</span><br><span class="line">除了根结点外， 每一个结点都有一个分支进入则</span><br><span class="line">n = B + <span class="number">1</span></span><br><span class="line">由于这些分支是由度为<span class="number">1</span> ， 度为<span class="number">2</span>， ...， 度为k的结点射出的， 所以</span><br><span class="line">B = n1 + <span class="number">2</span> * n2 + <span class="number">3</span> * n3 + ... + k * nk</span><br><span class="line">于是得</span><br><span class="line">n = n1 + <span class="number">2</span> * n2 + <span class="number">3</span> * n3 + ... + k * nk + <span class="number">1</span></span><br><span class="line">所以</span><br><span class="line">n0 = <span class="number">1</span> + n2 + <span class="number">2</span> * n3 + ... + (k - <span class="number">1</span>) * nk</span><br></pre></td></tr></table></figure><ul><li><strong>满二叉树</strong>： 深度为k且含有2 ^ k - 1个结点的二叉树。</li><li><strong>完全二叉树</strong>： 深度为k的， 有n个结点的二叉树， 当且仅当其每一个结点都与深度为k的满二叉树中编号从1 - n 一一对应时， 称为完全二叉树。<ul><li><strong>特点</strong> </li></ul><ol><li>叶子节点只可能在层次最大的两层上出现（第k层和第k - 1层）；</li><li>对任一结点， 若其右分支下的子孙的最大层次为l， 则其左分支下的子孙的最大层次必为l 或 l + 1 。</li></ol></li></ul><ol start="4"><li>具有n个结点的完全二叉树的深度为 (向下取整)[log2 n]  + 1。</li></ol><h3 id="遍历二叉树和线索二叉树"><a href="#遍历二叉树和线索二叉树" class="headerlink" title="遍历二叉树和线索二叉树"></a>遍历二叉树和线索二叉树</h3><h4 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h4><ul><li>前序（先序）遍历<ol><li>访问根结点</li><li>先序遍历左子树</li><li>先序遍历右子树</li></ol></li><li>中序遍历<ol><li>中序遍历左子树</li><li>访问根结点</li><li>中序遍历右子树</li></ol></li><li>后序遍历<ol><li>后序遍历左子树</li><li>后序遍历右子树</li><li>访问根结点</li></ol></li></ul><p>表达式的前缀表示：波兰式。<br>表达式的后缀表示：逆波兰式。<br>表达式的中缀表示：中缀式。  </p><p>如何根据中缀式写出波兰表达式和逆波兰表达式？<br><a href="https://solodance.top/2019/06/25/根据算数表达式（中缀式）求波兰表达式和逆波兰表达式/">相关博客链接</a></p><h4 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h4><p><strong>构造中序线索二叉树</strong><br>在二叉树的线索链表上添加一个头结点，令其lchild 指向二叉树的根结点， rchild指向中序遍历时的最后一个节点；同时令二叉树中序遍历序列第一个节点的lchild和最后一个节点的rchild指向头结点。<br><strong>以结点p为根的子树中序线索化</strong>  </p><ol><li>若p非空， 左子树递归线索化</li><li>若p的左孩子为空， 则给p加上左线索， 将其LTag置为1， 让p的左孩子指针指向pre（前驱）；否则将LTag置为0。</li><li>若pre的右孩子为空，则给pre加上右线索， 将其LTag置为1， 让pre的右孩子指针指向p（后继）；否则将pre的LTag置为0；</li><li>将pre指向刚访问过的结点p， 即pre = p。</li><li>右子树递归线索化。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThreading</span><span class="params">(BiThrTree p)</span></span>&#123;</span><br><span class="line">    <span class="comment">//pre为全局变量， 初始化时其右孩子指针为空， 便于在树的最左点开始建线索。</span></span><br><span class="line">    <span class="keyword">if</span> (p)&#123;</span><br><span class="line">        InThreading(p -&gt; lchild);</span><br><span class="line">        <span class="keyword">if</span> (!p-&gt;lchild)&#123; </span><br><span class="line">            p-&gt;LTag = <span class="number">1</span>;</span><br><span class="line">            p-&gt;lchild = pre;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p-&gt;LTag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (!pre-&gt;rchild)&#123;</span><br><span class="line">            pre-&gt;RTag = <span class="number">1</span>;</span><br><span class="line">            pre-&gt;rchild = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pre-&gt;RTag = <span class="number">1</span>;</span><br><span class="line">        pre = p;</span><br><span class="line">        InThreading(p-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>带头结点的二叉树中序线索化</strong>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderThreading</span><span class="params">(BiThrTree &amp;Thrt, BithrTree T)</span></span>&#123;</span><br><span class="line">    <span class="comment">//中序遍历二叉树T， 并将其中序线索化。 Thrt指向头结点</span></span><br><span class="line">    Thrt = <span class="keyword">new</span> BiThrNode;</span><br><span class="line">    Thrt-&gt;LTag = <span class="number">0</span>;</span><br><span class="line">    Thrt-&gt;RTag = <span class="number">1</span>;</span><br><span class="line">    Thrt-&gt;rchild = Thrt;</span><br><span class="line">    <span class="keyword">if</span> (!T)</span><br><span class="line">        Thrt-&gt;lchild = Thrt;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        Thrt-&gt;lchild=T;</span><br><span class="line">        pre = Thrt;</span><br><span class="line">        InThreading(T);</span><br><span class="line">        pre-&gt;rchild = Thrt;</span><br><span class="line">        pre-&gt;RTag = <span class="number">1</span>;</span><br><span class="line">        Thrt-&gt;rchild = pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>遍历线索二叉树</strong> </p><ol><li>在中序线索二叉树中查找<ul><li>若p-&gt;LTag=1 ，则p的左链指向其前驱；</li><li>若p-&gt;LTag=0 ，则说明p有左子树， 结点的前驱是遍历其左子树时最后访问的一个结点。</li><li>若p-&gt;RTag=1， 则p的右链指向其后继；</li><li>若p-&gt;RTag=0， 则说明p有右子树， 结点的后继是遍历其右子树时访问的第一个结点。</li></ul></li><li>在先序线索二叉树中查找<ul><li>若p-&gt;LTag=1， 则p的左链指向其前驱；</li><li>若p-&gt;LTag=0， 则说明p有左子树， 此时p的前驱有两种情况：若*p是其双亲的左孩子， 则其双亲结点为其前驱；否则应该是其双亲的左子树上先序遍历的最后一个结点。</li><li>若p-&gt;RTag=1， 则p的右链指向其后继；</li><li>若p-&gt;RTag=0， 则说明p有右子树， *p的后继必为其左子树数（若存在）或右子树根。</li></ul></li><li>在后序线索二叉树中查找<ul><li>若p-&gt;LTag=1， 则p的左链指向其前驱；</li><li>若p-&gt;LTag=0， 当p-&gt;RTag=0时， 则p的右链指示其前驱；若p-&gt;RTag=1时， 则p的左链指向其前驱；</li><li>若p-&gt;RTag=1， 则p的右链指向其后继；</li><li>查找其后继比较复杂，若<code>*p</code>是二叉树的根， 则其后继为空；若<code>*p</code>是其双亲的右孩子， 则其后继为双亲结点；若<code>*p</code>是其双亲上午左孩子， 且<code>*p</code>没有右兄弟，则其后继为双亲结点；若<code>*p</code>是其双亲的左孩子， 且<code>*p</code>有右兄弟，， 则其后继为双亲的右子树上按后序遍历列出的第一个结点。</li></ul></li></ol><h3 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h3><h4 id="树的存储结构"><a href="#树的存储结构" class="headerlink" title="树的存储结构"></a>树的存储结构</h4><ol><li>双亲表示法</li></ol><table><thead><tr><th>data</th><th>parent</th></tr></thead></table><ol start="2"><li><p>孩子表示法</p></li><li><p>孩子兄弟法<br>又称二叉树表示法， 或二叉链表表示法， 即以二叉链表做树的存储结构。链表中结点的两个链域分别指向该节点的第一个孩子结点和下一个兄弟结点。</p></li></ol><table><thead><tr><th>firstchild</th><th>data</th><th>nextsibling</th></tr></thead></table><h4 id="树与二叉树的转换"><a href="#树与二叉树的转换" class="headerlink" title="树与二叉树的转换"></a>树与二叉树的转换</h4><p>遵循左儿子右兄弟的原则。</p><h4 id="树和森林的遍历"><a href="#树和森林的遍历" class="headerlink" title="树和森林的遍历"></a>树和森林的遍历</h4><p><strong>树的遍历</strong>  </p><ul><li>先根遍历树：先访问数的根结点， 然后依次先根遍历根的每棵子树。</li><li>后根遍历树：先依次后根遍历每棵子树， 然后访问根结点。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一章-绪论&quot;&gt;&lt;a href=&quot;#第一章-绪论&quot; class=&quot;headerlink&quot; title=&quot;第一章 绪论&quot;&gt;&lt;/a&gt;第一章 绪论&lt;/h2&gt;&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://solodance.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://solodance.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="笔记" scheme="https://solodance.top/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验12 ：排序</title>
    <link href="https://solodance.top/2020/06/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C12%EF%BC%9A%20%E6%8E%92%E5%BA%8F/"/>
    <id>https://solodance.top/2020/06/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C12%EF%BC%9A%20%E6%8E%92%E5%BA%8F/</id>
    <published>2020-06-26T11:55:40.729Z</published>
    <updated>2019-06-09T13:43:30.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验12-：-排序"><a href="#实验12-：-排序" class="headerlink" title="实验12 ： 排序"></a>实验12 ： 排序</h2><h3 id="要求："><a href="#要求：" class="headerlink" title="要求："></a>要求：</h3><ol><li>直接插入排序；</li><li>折半插入排序；</li><li>希尔排序;</li><li>冒泡排序</li><li>简单选择排序</li><li>树型选择排序</li><li>堆排序</li></ol><p>详情见代码，注释应该比较清晰。<br>（树形排序暂时还没有， 等着补上（因为这个太费时间了））</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> b[N], a[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123; <span class="comment">// 直接插入排序（升序）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; a[i - <span class="number">1</span>]) &#123;  <span class="comment">// 反之， 若a[i] &gt;= a[i - 1] ，则此时这部分数组是升序的， 则不用处理</span></span><br><span class="line">            a[<span class="number">0</span>] = a[i];  <span class="comment">// a[0] 叫监视哨</span></span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; a[<span class="number">0</span>] &lt; a[j]; j--) &#123;</span><br><span class="line">                <span class="comment">// 这里的判断条件不 加等号即不是 a[0] &lt;= a[j] 有两个原因</span></span><br><span class="line">                <span class="comment">// 1. 保持排序的稳定性</span></span><br><span class="line">                <span class="comment">// 2. 如果加了等号， 那么当 i == 2 时， j == 0 ， 然后 a[0] &lt;= a[j]  此循环继续 j 变为-1 那么就变成 a[-1] 虽然这是合法的， 但会出现莫名的错误</span></span><br><span class="line">                a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            &#125;</span><br><span class="line">            a[j + <span class="number">1</span>] = a[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BInsertSort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123; <span class="comment">// 折半插入排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i, j, high, low, mid;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; a[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            a[<span class="number">0</span>] = a[i];</span><br><span class="line">            low = <span class="number">1</span>, high = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">                mid = low + high &gt;&gt; <span class="number">1</span>; <span class="comment">// 二进制运算， 相当于 （low + high）/ 2</span></span><br><span class="line">                <span class="keyword">if</span> (a[<span class="number">0</span>] &lt; a[mid])</span><br><span class="line">                    high = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    low = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= high + <span class="number">1</span>; j--) &#123;</span><br><span class="line">                a[j + <span class="number">1</span>] = a[j];</span><br><span class="line">            &#125;</span><br><span class="line">            a[high + <span class="number">1</span>] = a[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellInsert</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> dk)</span> </span>&#123;  <span class="comment">// 一趟 增量为dk的希尔排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = dk + <span class="number">1</span>; i &lt;= n; i++) &#123; <span class="comment">// dk + 1 是最小的 单位了</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; a[i - dk]) &#123;</span><br><span class="line">            a[<span class="number">0</span>] = a[i];</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = i - dk; j &gt; <span class="number">0</span> &amp;&amp; a[<span class="number">0</span>] &lt; a[j]; j -= dk) &#123;</span><br><span class="line">                a[j + dk] = a[j];</span><br><span class="line">            &#125;</span><br><span class="line">            a[j + dk] = a[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;  <span class="comment">// t 趟 希尔排序</span></span><br><span class="line">    <span class="keyword">int</span> k, t, dk[N];</span><br><span class="line">    t = <span class="keyword">int</span>(<span class="built_in">log</span>(n + <span class="number">1</span>));<span class="comment">// 书上给的</span></span><br><span class="line"><span class="comment">/*    cout &lt;&lt; "t : " &lt;&lt; t &lt;&lt; "\n";*/</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line">        dk[i] = <span class="built_in">pow</span>(<span class="number">2</span>, t - i + <span class="number">1</span>) - <span class="number">1</span>;  <span class="comment">// 书上给的</span></span><br><span class="line"><span class="comment">/*        cout &lt;&lt; "dk" &lt;&lt; i &lt;&lt; ':' &lt;&lt; dk[i] &lt;&lt; "\n";*/</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line">        ShellInsert(a, dk[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;  <span class="comment">// 冒泡排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n - i + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j - <span class="number">1</span>] &gt; a[j]) &#123;</span><br><span class="line">                swap(a[j - <span class="number">1</span>], a[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;  <span class="comment">// 简单选择排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &gt; a[j]) &#123;</span><br><span class="line">                swap(a[i], a[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> s, <span class="keyword">int</span> m)</span> </span>&#123; <span class="comment">// 筛法调整堆</span></span><br><span class="line">    <span class="comment">// 假设a[s + 1..m] 已经是堆， 将a[s..m] 调整为以a[s] 为根的大根堆</span></span><br><span class="line">    <span class="keyword">int</span> rc = a[s];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span> * s; j &lt;= m; j *= <span class="number">2</span>) &#123; <span class="comment">// 从2 * s 开始</span></span><br><span class="line">        <span class="keyword">if</span> (j &lt; m &amp;&amp; a[j] &lt; a[j + <span class="number">1</span>]) <span class="comment">// 注意 莫忘j &lt; m</span></span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span> (rc &gt;= a[j])</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        a[s] = a[j];</span><br><span class="line">        s = j;</span><br><span class="line">    &#125;</span><br><span class="line">    a[s] = rc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatHeap</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123; <span class="comment">// 建大根堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        HeapAdjust(a, i, n);</span><br><span class="line">        <span class="comment">//  序号大于 int (n / 2) 的节点都是叶子节点 注意 n / 2 - 1 不行  因为 n / 2 * 2 ?= n</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</span><br><span class="line">    CreatHeap(a);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">        swap(a[<span class="number">1</span>], a[i]);</span><br><span class="line">        HeapAdjust(a, <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">TSelect</span><span class="params">(<span class="keyword">int</span> c[], <span class="keyword">int</span> s, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> c[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = s; i &lt;= m; i += <span class="number">2</span>) &#123;</span><br><span class="line">        c[i / <span class="number">2</span>] = min(c[i], c[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d = m - s + <span class="number">1</span>;</span><br><span class="line">    m = s - <span class="number">1</span>;</span><br><span class="line">    s = m - d / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TSelectSort</span><span class="params">(<span class="keyword">int</span> a[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 因为实在不知道如何记录 value 对应的 key  我就用map写吧</span></span><br><span class="line">    <span class="keyword">int</span> c[N]; <span class="comment">// 储存树</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; ma; <span class="comment">// 记录 value 对应key</span></span><br><span class="line">    <span class="keyword">int</span> k, nn = n;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        a[n + <span class="number">1</span>] = INF;</span><br><span class="line">        nn++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*让第 n + 1 个数变成正无穷， 叶子节点为偶数个</span></span><br><span class="line"><span class="comment">     *如果 n 为 偶数， 那就不起作用</span></span><br><span class="line"><span class="comment">     * 如果n 为奇数， 起作用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    k = nn / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        c[k] = a[i];</span><br><span class="line">        ma[a[i]] = k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        a[i] = TSelect(c, nn / <span class="number">2</span> + <span class="number">1</span>, nn);</span><br><span class="line">        c[ma[a[i]]] = INF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入你要排序的序列中的元素个数：\n"</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入各元素：\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            a[i] = b[i];   <span class="comment">// 复制此数组， 以便于再次利用原数组</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请选择你要排序的方法的下标：\n"</span></span><br><span class="line">            <span class="string">"1、直接插入排序；\n"</span></span><br><span class="line">            <span class="string">"2、折半插入排序；\n"</span></span><br><span class="line">            <span class="string">"3、希尔排序;\n"</span></span><br><span class="line">            <span class="string">"4、冒泡排序\n"</span></span><br><span class="line">            <span class="string">"5、简单选择排序\n"</span></span><br><span class="line">            <span class="string">"6、堆排序\n"</span>);</span><br><span class="line">        <span class="keyword">int</span> o;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; o;</span><br><span class="line">        <span class="keyword">switch</span> (o) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: InsertSort(a); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: BInsertSort(a); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: ShellSort(a); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: BubbleSort(a); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>: SelectSort(a); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: HeapSort(a); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"排序后的结果为：\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入你要排序的序列中的元素个数(结束请输入0)：\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实验12-：-排序&quot;&gt;&lt;a href=&quot;#实验12-：-排序&quot; class=&quot;headerlink&quot; title=&quot;实验12 ： 排序&quot;&gt;&lt;/a&gt;实验12 ： 排序&lt;/h2&gt;&lt;h3 id=&quot;要求：&quot;&gt;&lt;a href=&quot;#要求：&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://solodance.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://solodance.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="查找" scheme="https://solodance.top/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
</feed>
